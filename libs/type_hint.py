from typing import Any, Callable, List, Protocol


class D3(Protocol):
    def select(self, selector: str) -> 'D3':
        ...

    def selectAll(self, selector: str) -> 'D3':
        ...

    def append(self, tag: str) -> 'D3':
        ...

    def attr(self, key: str, value: Any) -> 'D3':
        ...

    def style(self, key: str, value: Any) -> 'D3':
        ...

    def data(self, data: list) -> 'D3':
        ...

    def enter(self) -> 'D3':
        ...

    def exit(self) -> 'D3':
        ...

    def remove(self) -> 'D3':
        ...

    def text(self, value: str) -> 'D3':
        ...

    def on(self, event: str, handler: Callable) -> 'D3':
        ...

    def call(self, function: Callable) -> 'D3':
        ...

    def merge(self, selection: 'D3') -> 'D3':
        ...

    def each(self, function: Callable) -> 'D3':
        ...

    def property(self, name: str, value: Any) -> 'D3':
        ...

    def classed(self, name: str, value: bool) -> 'D3':
        ...

    def node(self) -> Any:
        ...

    def json(self, url: str) -> 'Promise':
        ...

    def geoMercator(self) -> 'GeoProjection':
        ...

    def geoPath(self) -> 'GeoPath':
        ...

    def transition(self) -> 'D3':
        ...

    def duration(self, millis: int) -> 'D3':
        ...

    def delay(self, millis: int) -> 'D3':
        ...

    def ease(self, easing: Callable) -> 'D3':
        ...


class Promise(Protocol):
    def then(self, on_fulfilled: Callable) -> 'Promise':
        ...

    def catch(self, on_rejected: Callable) -> 'Promise':
        ...


class GeoProjection(Protocol):
    def center(self, coordinates: List[float]) -> 'GeoProjection':
        ...

    def scale(self, value: float) -> 'GeoProjection':
        ...

    def translate(self, coordinates: List[float]) -> 'GeoProjection':
        ...


class GeoPath(Protocol):
    def projection(self, projection: GeoProjection) -> 'GeoPath':
        ...

    def __call__(self, feature: Any) -> str:
        ...
